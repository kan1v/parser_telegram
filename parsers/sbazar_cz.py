from playwright.async_api import async_playwright
import urllib.parse
from utils import get_random_user_agent, get_random_proxy

import os
import logging

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–µ—Ä–∞
LOG_DIR = "logs"
os.makedirs(LOG_DIR, exist_ok=True)

logger = logging.getLogger("sbazar")
logger.setLevel(logging.INFO)
logger.propagate = False

if not logger.hasHandlers():
    formatter = logging.Formatter("%(asctime)s | %(levelname)s | %(message)s")
    
    fh = logging.FileHandler(os.path.join(LOG_DIR, "sbazar.log"), encoding="utf-8")
    fh.setFormatter(formatter)

    sh = logging.StreamHandler()
    sh.setFormatter(formatter)

    logger.addHandler(fh)
    logger.addHandler(sh)


links_sbazar = set()

async def auto_scroll(page, pause=1500, max_empty_scrolls=3):
    empty_scrolls = 0
    try:
        last_height = await page.evaluate("document.body.scrollHeight")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è scrollHeight: {e}")
        return

    while empty_scrolls < max_empty_scrolls:
        try:
            await page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
            await page.wait_for_timeout(pause)
            new_height = await page.evaluate("document.body.scrollHeight")
        except Exception as e:
            if "Execution context was destroyed" in str(e):
                logger.error("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–Ω–∏—á—Ç–æ–∂–µ–Ω –≤–æ –≤—Ä–µ–º—è —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥ –∏–ª–∏ reload).")
            else:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞: {e}")
            break

        if new_height == last_height:
            empty_scrolls += 1
        else:
            empty_scrolls = 0
        last_height = new_height



async def search_sbazar(keyword: str):
    found_links = []
    encoded_keyword = urllib.parse.quote(keyword)
    base_url = f"https://www.sbazar.cz/hledej/{encoded_keyword}/31-knihy-literatura"
    logger.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º Sbazar: {base_url}")

    async with async_playwright() as p:
        user_agent = get_random_user_agent()
        proxy = get_random_proxy()
        launch_args = {"headless": True}
        if proxy:
            launch_args["proxy"] = {
            "server": proxy["server"],
            "username": proxy["username"],
            "password": proxy["password"]
        }

        browser = await p.chromium.launch(**launch_args)
        context = await browser.new_context()
        page = await context.new_page()
        await page.set_extra_http_headers({"User-Agent": user_agent})

        try:
            await page.goto(base_url, timeout=80000)
            await page.wait_for_load_state("networkidle")


            # üëâ –ó–∞–∫—Ä—ã–≤–∞–µ–º cookie popup
            try:
                await page.click("button:has-text('Souhlas√≠m')", timeout=6000)
                logger.info("‚úÖ [Sbazar] Cookie popup –∑–∞–∫—Ä—ã—Ç")
                await page.wait_for_timeout(1500)  # üëà –¥–∞—ë–º –≤—Ä–µ–º—è —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
            except:
                logger.info("‚ÑπÔ∏è [Sbazar] Cookie popup –Ω–µ –Ω–∞–π–¥–µ–Ω")


            # üîÑ –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª
            await auto_scroll(page)

            # ‚è≥ –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            await page.wait_for_selector('a[href^="/inzerat/"]', timeout=20000)

            # üîó –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã
            items = await page.query_selector_all('a[href^="/"]')

            for item in items:
                href = await item.get_attribute("href")
                if (
                    href
                    and (
                        href.startswith("/inzerat/")
                        or href.startswith("/rozbalena-nabidka/")
                    )
                ):
                    full_url = "https://www.sbazar.cz" + href
                    if full_url not in found_links:
                        found_links.append(full_url)


        except Exception as e:
            logger.error(f"‚ùå [Sbazar] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∫–ª—é—á—É '{keyword}': {e}")
        finally:
            await browser.close()

    logger.info(f"üîç [Sbazar] –ü–æ –∫–ª—é—á—É '{keyword}' –Ω–∞–π–¥–µ–Ω–æ {len(found_links)} —Å—Å—ã–ª–æ–∫")
    return found_links
