import asyncio
import random
import logging
import os

from utils import load_keywords, load_seen_links, save_seen_links
from config import KEYWORDS_FILE, SEEN_LINKS_FILE
from parsers.bazos_cz import search_bazos
from parsers.vinted_cz import search_vinted
from parsers.sbazar_cz import search_sbazar
from parsers.aukro_cz import search_aukro
from telegram_bot import send_to_telegram, run_bot  # run_bot –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç start_polling

MAX_CONCURRENT_TASKS = 20
semaphore = asyncio.Semaphore(MAX_CONCURRENT_TASKS)

LOG_DIR = "logs"
os.makedirs(LOG_DIR, exist_ok=True)

logger = logging.getLogger("main")
logger.setLevel(logging.INFO)

if not logger.hasHandlers():
    fh = logging.FileHandler(os.path.join(LOG_DIR, "main.log"), encoding="utf-8")
    fh.setFormatter(logging.Formatter("%(asctime)s | %(levelname)s | %(message)s"))
    logger.addHandler(fh)
    logger.addHandler(logging.StreamHandler())

seen_links_store = {}
last_id_store = {}

PARSERS = {
    "bazos": search_bazos,
    "vinted": search_vinted,
    "sbazar": search_sbazar,
    "aukro": search_aukro,
}

MAX_LINKS_PER_MESSAGE = 30


async def send_links_separately(links: list[str], site: str, keyword: str):
    for link in links:
        message = f"üîç <b>{site.upper()}</b> | <b>{keyword}</b>\n{link}"
        try:
            await send_to_telegram(message)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")


def normalize_link(link: str) -> str:
    return link.strip().lower()


async def process_keyword(site: str, keyword: str, func):
    try:
        async with semaphore:
            seen_links = seen_links_store.get(site, set())
            last_id = last_id_store.get(site)

            links = await func(keyword)
            normalized_links = [normalize_link(link) for link in links]
            normalized_seen = set(normalize_link(link) for link in seen_links)

            new_links = [link for link in normalized_links if link not in normalized_seen]

            logger.info(f"[{site}] –ü–æ –∫–ª—é—á—É '{keyword}': –≤—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫ —Å —Å–∞–π—Ç–∞: {len(links)}")
            logger.info(f"[{site}] –£–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {len(seen_links)}")
            logger.info(f"[{site}] –ù–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫: {len(new_links)}")

            if new_links:
                await send_links_separately(new_links, site, keyword)
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(new_links)} –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –ø–æ –∫–ª—é—á—É '{keyword}' ({site})")

                seen_links.update(new_links)
                last_id = new_links[-1]

                save_seen_links(SEEN_LINKS_FILE[site], seen_links, last_id)
                seen_links_store[site] = seen_links
                last_id_store[site] = last_id
            else:
                logger.info(f"‚ÑπÔ∏è –ü–æ –∫–ª—é—á—É '{keyword}' –Ω–∞ —Å–∞–π—Ç–µ '{site}' –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ—Ç.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª—é—á–∞ '{keyword}' –Ω–∞ {site}: {e}")


async def start_parsers_loop():
    while True:
        await start_parsers()
        logger.info("‚è∞ –û–∂–∏–¥–∞–µ–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—É—Å–∫–æ–º...")
        await asyncio.sleep(60)


async def start_parsers():
    global seen_links_store, last_id_store

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–æ–≤...")

    keywords = load_keywords(KEYWORDS_FILE)
    tasks = []

    for site, search_func in PARSERS.items():
        seen_links, last_id = load_seen_links(SEEN_LINKS_FILE[site])
        seen_links_store[site] = seen_links
        last_id_store[site] = last_id

        for keyword in keywords:
            logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: {site} | –ö–ª—é—á: '{keyword}'")
            tasks.append(asyncio.create_task(process_keyword(site, keyword, search_func)))

    await asyncio.gather(*tasks)


async def main():
    await asyncio.gather(
        start_parsers_loop(),  # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä—ã –≤ —Ü–∏–∫–ª–µ
        run_bot(),             # –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
    )

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é")
