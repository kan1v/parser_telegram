import asyncio
import os 
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command, CommandStart
from aiogram.client.default import DefaultBotProperties
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import BufferedInputFile


import logging

from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID

from inline_kbd import admin_choices

from user_control import set_user_status


bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–µ—Ä–∞ 
LOG_DIR = "logs"
os.makedirs(LOG_DIR, exist_ok=True)

logger = logging.getLogger("tg_bot")
logger.setLevel(logging.INFO)

if not logger.hasHandlers():
    fh = logging.FileHandler(os.path.join(LOG_DIR, "tg_bot.log"), encoding="utf-8")
    fh.setFormatter(logging.Formatter("%(asctime)s | %(levelname)s | %(message)s"))
    logger.addHandler(fh)
    logger.addHandler(logging.StreamHandler())

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç–∞—Ç—É—Å–æ–≤
user_message_status = {}

def set_user_status(user_id: int, status: bool):
    user_message_status[user_id] = status

def is_user_active(user_id: int) -> bool:
    return user_message_status.get(user_id, True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True

# ========= –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç =========
async def send_to_telegram(message: str, chat_id: int = TELEGRAM_CHAT_ID):
    if not is_user_active(chat_id):
        logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–∫–ª—é—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return
    try:
        await bot.send_message(chat_id=chat_id, text=message)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")


# ========= –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ =========
@dp.message(CommandStart())
async def start_cmd(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.")

@dp.message(Command("id"))
async def id_cmd(message: Message):
    await message.answer(f"–í–∞—à chat_id: <code>{message.chat.id}</code>", parse_mode="HTML")

@dp.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer("üìå –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –Ω–∞—á–∞—Ç—å\n/id ‚Äî —É–∑–Ω–∞—Ç—å chat_id\n/help ‚Äî –ø–æ–º–æ—â—å")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω—É - –ø–æ TELEGRAM_CHAT_ID
@dp.message(Command('admin'))
async def admin_cmd(message: types.Message):
    user_username = message.from_user.username
    if message.from_user.id == TELEGRAM_CHAT_ID:
        await message.answer(f'‚≠ê –ê–¥–∏–º–Ω –ø–∞–Ω–µ–ª—å {user_username} ‚≠ê \n –ü–æ–¥–¥–µ—Ä–∂—ã–≤–∞–µ–º—ã–µ —Å–∞–π—Ç—ã: \n üåê bazos.cz \n üåê sbazar.cz \n üåê aukro.cz \n üåê vinted.cz \n  ', reply_markup=admin_choices)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ üõë')

@dp.callback_query(lambda c: c.data == 'start_messages')
async def start_messages(callback: types.CallbackQuery):
    set_user_status(callback.from_user.id, True)
    await callback.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
    logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞")
    # –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å, —á—Ç–æ —Å–µ–π—á–∞—Å —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã


@dp.callback_query(lambda c: c.data == 'stop_messages')
async def stop_messages(callback: types.CallbackQuery):
    set_user_status(callback.from_user.id, False)
    await callback.answer("‚õîÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã")
    logger.info("‚õîÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞")
    # –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ 
@dp.callback_query(lambda c: c.data.startswith('keywords_data'))
async def get_keywords_data(callback: types.CallbackQuery):
    file_path = "parsers/keywords.txt"  # –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É

    try:
        document = FSInputFile(file_path, filename="keywords.txt")
        await bot.send_document(chat_id=callback.from_user.id, document=document)
        await callback.answer("üì§ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", show_alert=True)
        logger.info("–§–∞–π–ª —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª", show_alert=True)


# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
class AddKeywordState(StatesGroup):
    waiting_for_keyword = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"
@dp.callback_query(lambda c: c.data == 'add_one_keyword')
async def prompt_for_keyword(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:")
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–∞–π–ª")
    await state.set_state(AddKeywordState.waiting_for_keyword)
    await callback.answer()

@dp.message(AddKeywordState.waiting_for_keyword)
async def save_new_keyword(message: types.Message, state: FSMContext):
    keyword = message.text.strip()

    if not keyword:
        await message.answer("‚ùå –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    file_path = "parsers/keywords.txt"
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            lines = f.readlines()
            existing_keywords = [line.strip() for line in lines]
            logger.info("–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞")
    except FileNotFoundError as e:
        existing_keywords = []
        lines = []
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {e}")

    if keyword in existing_keywords:
        await message.answer("‚ö†Ô∏è –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    else:
        with open(file_path, "a", encoding="utf-8") as f:
            if lines and not lines[-1].endswith('\n'):
                f.write('\n')  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ \n
            f.write(f"{keyword}\n")
        await message.answer(f"‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ <b>{keyword}</b> –¥–æ–±–∞–≤–ª–µ–Ω–æ.")

    await state.clear()


# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
KEYWORDS_FILE_PATH = "parsers/keywords.txt"

# –§–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
stop_parsing = False

class ImportKeywordState(StatesGroup):
    waiting_for_file = State()

@dp.callback_query(lambda c: c.data == 'import_keywords_data')
async def prompt_import_keywords(callback: types.CallbackQuery, state: FSMContext):
    global stop_parsing
    stop_parsing = True  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    await callback.message.answer("üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .txt —Ñ–∞–π–ª —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.")
    await state.set_state(ImportKeywordState.waiting_for_file)

@dp.message(ImportKeywordState.waiting_for_file)
async def handle_imported_file(message: types.Message, state: FSMContext):
    global stop_parsing
    document = message.document

    if not document or not document.file_name.endswith(".txt"):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .txt —Ñ–∞–π–ª.")
        return

    os.makedirs("parsers", exist_ok=True)

    file = await message.bot.get_file(document.file_id)
    await message.bot.download_file(file.file_path, destination=KEYWORDS_FILE_PATH)

    await message.answer("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∑–∞–º–µ–Ω—ë–Ω.")
    stop_parsing = False  # –°–Ω–æ–≤–∞ –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥
    await state.clear()



# ========= –ó–∞–ø—É—Å–∫ =========
async def run_bot():
    logger.info("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)


# ========= –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç =========
if __name__ == "__main__":
    try:
        asyncio.run(run_bot())
    except (KeyboardInterrupt, SystemExit):
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")

